name: Deploy Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        mkdir lambda_package
        pip install -r requirements.txt -t lambda_package/

    - name: Package Lambda function
      run: |
        mkdir -p lambda_package
        cp lambda_function.py lambda_package/
        cd lambda_package
        zip -r ../lambda_function.zip .
        cd ..

    - name: List files
      run: ls -la

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create or Update Lambda Function
      run: |
        FUNCTION_NAME=lambda-user-video-processor
        ROLE_ARN=arn:aws:iam::851725324532:role/fiap-hackaton-lambda-role
        ZIP_FILE_PATH=lambda_function.zip

        # Check if the function exists
        if aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://$ZIP_FILE_PATH
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --zip-file fileb://$ZIP_FILE_PATH \
              --handler lambda_function.lambda_handler \
              --role $ROLE_ARN \
              --environment Variables="{databaseName=${{ secrets.DB_NAME }},mongoUri=${{ secrets.MONGODB_URI }},collection=${{ secrets.COLLECTION }},sqsUrl=${{ secrets.SQS_URL }}}" \
              --runtime python3.9
        fi
